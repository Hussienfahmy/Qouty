// Generated by Dagger (https://dagger.dev).
package com.hussien.qouty.utilities;

import android.content.Context;
import com.hussien.qouty.data.QuotesRepository;
import com.hussien.qouty.ui.settings.SettingsDataStoreManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.MainCoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ActionsUtils_Factory implements Factory<ActionsUtils> {
  private final Provider<Context> contextProvider;

  private final Provider<CoroutineScope> scopeProvider;

  private final Provider<MainCoroutineDispatcher> uiDispatcherProvider;

  private final Provider<QuotesRepository> repositoryProvider;

  private final Provider<SettingsDataStoreManager> settingsDataStoreManagerProvider;

  public ActionsUtils_Factory(Provider<Context> contextProvider,
      Provider<CoroutineScope> scopeProvider,
      Provider<MainCoroutineDispatcher> uiDispatcherProvider,
      Provider<QuotesRepository> repositoryProvider,
      Provider<SettingsDataStoreManager> settingsDataStoreManagerProvider) {
    this.contextProvider = contextProvider;
    this.scopeProvider = scopeProvider;
    this.uiDispatcherProvider = uiDispatcherProvider;
    this.repositoryProvider = repositoryProvider;
    this.settingsDataStoreManagerProvider = settingsDataStoreManagerProvider;
  }

  @Override
  public ActionsUtils get() {
    return newInstance(contextProvider.get(), scopeProvider.get(), uiDispatcherProvider.get(), repositoryProvider.get(), settingsDataStoreManagerProvider.get());
  }

  public static ActionsUtils_Factory create(Provider<Context> contextProvider,
      Provider<CoroutineScope> scopeProvider,
      Provider<MainCoroutineDispatcher> uiDispatcherProvider,
      Provider<QuotesRepository> repositoryProvider,
      Provider<SettingsDataStoreManager> settingsDataStoreManagerProvider) {
    return new ActionsUtils_Factory(contextProvider, scopeProvider, uiDispatcherProvider, repositoryProvider, settingsDataStoreManagerProvider);
  }

  public static ActionsUtils newInstance(Context context, CoroutineScope scope,
      MainCoroutineDispatcher uiDispatcher, QuotesRepository repository,
      SettingsDataStoreManager settingsDataStoreManager) {
    return new ActionsUtils(context, scope, uiDispatcher, repository, settingsDataStoreManager);
  }
}
