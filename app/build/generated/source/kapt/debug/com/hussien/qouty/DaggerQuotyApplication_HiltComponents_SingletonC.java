// Generated by Dagger (https://dagger.dev).
package com.hussien.qouty;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.content.res.AssetManager;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkManager;
import androidx.work.WorkerParameters;
import com.hussien.qouty.data.AppDatabase;
import com.hussien.qouty.data.QuotesDao;
import com.hussien.qouty.data.QuotesRepository;
import com.hussien.qouty.di.AppModule;
import com.hussien.qouty.di.AppModule_ProvideAssetManagerFactory;
import com.hussien.qouty.di.AppModule_ProvideCoroutineAppScopeFactory;
import com.hussien.qouty.di.AppModule_ProvideDaoFactory;
import com.hussien.qouty.di.AppModule_ProvideDatabaseFactory;
import com.hussien.qouty.di.AppModule_ProvideIoDispatcherFactory;
import com.hussien.qouty.di.AppModule_ProvideUiDispatcherFactory;
import com.hussien.qouty.di.AppModule_ProvideWorkManagerFactory;
import com.hussien.qouty.sync.NotificationWorker;
import com.hussien.qouty.sync.NotificationWorker_AssistedFactory;
import com.hussien.qouty.sync.QuotesBroadCastReceiver;
import com.hussien.qouty.sync.QuotesBroadCastReceiver_MembersInjector;
import com.hussien.qouty.ui.MainActivity;
import com.hussien.qouty.ui.quotes.QuotesFragment;
import com.hussien.qouty.ui.quotes.QuotesViewModel;
import com.hussien.qouty.ui.quotes.QuotesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.hussien.qouty.ui.settings.SettingsDataStoreManager;
import com.hussien.qouty.ui.settings.SettingsFragment;
import com.hussien.qouty.ui.settings.SettingsViewModel;
import com.hussien.qouty.ui.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.hussien.qouty.utilities.ActionsUtils;
import com.hussien.qouty.utilities.NotificationUtils;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.MainCoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerQuotyApplication_HiltComponents_SingletonC extends QuotyApplication_HiltComponents.SingletonC {
  private final AppModule appModule;

  private final ApplicationContextModule applicationContextModule;

  private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<AppDatabase> provideDatabaseProvider;

  private Provider<CoroutineDispatcher> provideIoDispatcherProvider;

  private Provider<QuotesRepository> quotesRepositoryProvider;

  private Provider<SettingsDataStoreManager> settingsDataStoreManagerProvider;

  private Provider<CoroutineScope> provideCoroutineAppScopeProvider;

  private Provider<MainCoroutineDispatcher> provideUiDispatcherProvider;

  private Provider<ActionsUtils> actionsUtilsProvider;

  private Provider<NotificationWorker_AssistedFactory> notificationWorker_AssistedFactoryProvider;

  private DaggerQuotyApplication_HiltComponents_SingletonC(AppModule appModuleParam,
      ApplicationContextModule applicationContextModuleParam) {
    this.appModule = appModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    initialize(appModuleParam, applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    return AppModule_ProvideDatabaseFactory.provideDatabase(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private QuotesDao quotesDao() {
    return AppModule_ProvideDaoFactory.provideDao(appModule, provideDatabaseProvider.get());
  }

  private QuotesRepository quotesRepository() {
    return new QuotesRepository(quotesDao(), provideIoDispatcherProvider.get());
  }

  private SettingsDataStoreManager settingsDataStoreManager() {
    return new SettingsDataStoreManager(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ActionsUtils actionsUtils() {
    return new ActionsUtils(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), provideCoroutineAppScopeProvider.get(), provideUiDispatcherProvider.get(), quotesRepositoryProvider.get(), settingsDataStoreManagerProvider.get());
  }

  private NotificationUtils notificationUtils() {
    return new NotificationUtils(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), actionsUtilsProvider.get());
  }

  private NotificationWorker notificationWorker(Context context, WorkerParameters workerParams) {
    return new NotificationWorker(context, workerParams, quotesRepositoryProvider.get(), settingsDataStoreManagerProvider.get(), notificationUtils(), provideUiDispatcherProvider.get());
  }

  private NotificationWorker_AssistedFactory notificationWorker_AssistedFactory() {
    return new NotificationWorker_AssistedFactory() {
      @Override
      public NotificationWorker create(Context context, WorkerParameters workerParams) {
        return singletonC.notificationWorker(context, workerParams);
      }
    };
  }

  private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
      ) {
    return Collections.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>singletonMap("com.hussien.quoty.sync.NotificationWorker", (Provider) notificationWorker_AssistedFactoryProvider);
  }

  private HiltWorkerFactory hiltWorkerFactory() {
    return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
  }

  private AssetManager assetManager() {
    return AppModule_ProvideAssetManagerFactory.provideAssetManager(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private WorkManager workManager() {
    return AppModule_ProvideWorkManagerFactory.provideWorkManager(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam,
      final ApplicationContextModule applicationContextModuleParam) {
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonC, 2));
    this.provideIoDispatcherProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineDispatcher>(singletonC, 3));
    this.quotesRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<QuotesRepository>(singletonC, 1));
    this.settingsDataStoreManagerProvider = DoubleCheck.provider(new SwitchingProvider<SettingsDataStoreManager>(singletonC, 4));
    this.provideCoroutineAppScopeProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineScope>(singletonC, 6));
    this.provideUiDispatcherProvider = DoubleCheck.provider(new SwitchingProvider<MainCoroutineDispatcher>(singletonC, 7));
    this.actionsUtilsProvider = DoubleCheck.provider(new SwitchingProvider<ActionsUtils>(singletonC, 5));
    this.notificationWorker_AssistedFactoryProvider = new SwitchingProvider<>(singletonC, 0);
  }

  @Override
  public void injectQuotyApplication(QuotyApplication quotyApplication) {
    injectQuotyApplication2(quotyApplication);
  }

  @Override
  public void injectQuotesBroadCastReceiver(QuotesBroadCastReceiver quotesBroadCastReceiver) {
    injectQuotesBroadCastReceiver2(quotesBroadCastReceiver);
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  private QuotyApplication injectQuotyApplication2(QuotyApplication instance) {
    QuotyApplication_MembersInjector.injectWorkerFactory(instance, hiltWorkerFactory());
    return instance;
  }

  private QuotesBroadCastReceiver injectQuotesBroadCastReceiver2(QuotesBroadCastReceiver instance) {
    QuotesBroadCastReceiver_MembersInjector.injectActionsUtils(instance, actionsUtilsProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public QuotyApplication_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerQuotyApplication_HiltComponents_SingletonC(appModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements QuotyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public QuotyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements QuotyApplication_HiltComponents.ActivityC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements QuotyApplication_HiltComponents.FragmentC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements QuotyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements QuotyApplication_HiltComponents.ViewC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements QuotyApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements QuotyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerQuotyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public QuotyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends QuotyApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends QuotyApplication_HiltComponents.FragmentC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectQuotesFragment(QuotesFragment quotesFragment) {
    }

    @Override
    public void injectSettingsFragment(SettingsFragment settingsFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends QuotyApplication_HiltComponents.ViewC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends QuotyApplication_HiltComponents.ActivityC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(2).add(QuotesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends QuotyApplication_HiltComponents.ViewModelC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<QuotesViewModel> quotesViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private ViewModelCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private QuotesViewModel quotesViewModel() {
      return new QuotesViewModel(singletonC.quotesRepositoryProvider.get(), singletonC.actionsUtilsProvider.get(), singletonC.settingsDataStoreManagerProvider.get(), singletonC.assetManager());
    }

    private SettingsViewModel settingsViewModel() {
      return new SettingsViewModel(singletonC.settingsDataStoreManagerProvider.get(), singletonC.quotesRepositoryProvider.get(), singletonC.workManager());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.quotesViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("com.hussien.quoty.ui.quotes.QuotesViewModel", (Provider) quotesViewModelProvider).put("com.hussien.quoty.ui.settings.SettingsViewModel", (Provider) settingsViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.hussien.quoty.ui.quotes.QuotesViewModel 
          return (T) viewModelCImpl.quotesViewModel();

          case 1: // com.hussien.quoty.ui.settings.SettingsViewModel 
          return (T) viewModelCImpl.settingsViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends QuotyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends QuotyApplication_HiltComponents.ServiceC {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerQuotyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerQuotyApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerQuotyApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.hussien.quoty.sync.NotificationWorker_AssistedFactory 
        return (T) singletonC.notificationWorker_AssistedFactory();

        case 1: // com.hussien.quoty.data.QuotesRepository 
        return (T) singletonC.quotesRepository();

        case 2: // com.hussien.quoty.data.AppDatabase 
        return (T) singletonC.appDatabase();

        case 3: // @com.hussien.quoty.di.IODispatcher kotlinx.coroutines.CoroutineDispatcher 
        return (T) AppModule_ProvideIoDispatcherFactory.provideIoDispatcher(singletonC.appModule);

        case 4: // com.hussien.quoty.ui.settings.SettingsDataStoreManager 
        return (T) singletonC.settingsDataStoreManager();

        case 5: // com.hussien.quoty.utilities.ActionsUtils 
        return (T) singletonC.actionsUtils();

        case 6: // @com.hussien.quoty.di.ApplicationScope kotlinx.coroutines.CoroutineScope 
        return (T) AppModule_ProvideCoroutineAppScopeFactory.provideCoroutineAppScope(singletonC.appModule);

        case 7: // @com.hussien.quoty.di.UIDispatcher kotlinx.coroutines.MainCoroutineDispatcher 
        return (T) AppModule_ProvideUiDispatcherFactory.provideUiDispatcher(singletonC.appModule);

        default: throw new AssertionError(id);
      }
    }
  }
}
